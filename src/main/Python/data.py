import numpy as np

def apply_f_to_list(function, *sample: list) -> list:
    f_list = list(map(function, *sample))
    return f_list

def summation(function, *sample: list[float]) -> float:
    f_applied_list: list[float] = apply_f_to_list(function, *sample)
    summ: float = sum(f_applied_list)
    return summ

def variance(sample: list[float]) -> float:
    v: float = float(np.var(sample, ddof=1))
    # mean: float = float(np.mean(sample))
    # summ: float = summation(lambda x: (x - mean) ** 2, sample)
    # sample_size: int = len(sample)
    # v = summ / (sample_size - 1)
    return v

def covariance(sample_1: list[float], sample_2: list[float]) -> float:
    n = len(sample_1)

    if len(sample_2) != n:
        return 0
    
    avg_1: float = float(np.average(sample_1))
    avg_2: float = float(np.average(sample_2))
    tv: float = summation(lambda x, y: (x - avg_1) * (y - avg_2), sample_1, sample_2)
    return tv / (n - 1)

def stdev(sample: list[float]) -> float:
    standard_deviation: float = float(np.std(sample, ddof=1))
    # o2 = variance(sample)
    # standard_deviation = np.sqrt(o2)
    return standard_deviation

def daily_return(sample_open: list[float], sample_close: list[float]) -> list[float]:
    def R(open: float, close: float):
        return (close - open) / open
    return list(map(lambda o, c: R(o, c), sample_open, sample_close))

def beta4(open_1: list[float], close_1: list[float], open_2: list[float], close_2: list[float]) -> float:
    return_rate_1: list[float] = daily_return(open_1, close_1)
    return_rate_2: list[float] = daily_return(open_2, close_2)
    return beta2(return_rate_1, return_rate_2)

def beta2(return_rate_primary: list[float], return_rate_benchmark: list[float]) -> float:
    primary_benchmark_covariance: float = covariance(return_rate_primary, return_rate_benchmark)
    primary_variance: float = variance(return_rate_primary)
    return primary_benchmark_covariance / primary_variance

def sma(sample: list[float], iteration: int) -> tuple[list[float], list[float]]:
    sma_arr: list[float] = [sample[0]]
    base_arr: list[float] = [0]
    sample_size: float = len(sample)
    for i in range(0, sample_size, iteration):
        average_i: float = 0
        k: int = i + iteration
        diff: int = sample_size - k
        if diff < 0:
            average_i = np.average(sample[i:k + diff])
            k = i + diff
        else:
            average_i = np.average(sample[i:k])
        sma_arr.append(average_i)
        base_arr.append(k)
    return sma_arr, base_arr


if __name__ == '__main__':
    

    ## TEST
    # aapl_open_s = [152.6, 152.55, 152.75, 152.59, 151.0125, 150.98, 152.5699, 152.675, 152.64, 152.52, 152.16, 151.18, 151.14, 150.98, 151.08, 150.95, 150.94, 150.64, 150.52, 150.47, 152.11, 151.92, 151.8, 152.61, 151.565, 150.74, 147.622, 149.8, 149.52, 149.0, 149.11, 150.02, 148.45, 148.76, 149.04, 148.47, 148.66, 148.2, 149.17, 149.86, 150.44, 149.79, 151.04, 150.3, 150.02, 150.48, 150.58, 150.29, 150.4, 150.57, 150.61, 150.54, 151.31, 151.96, 153.56, 154.11, 153.88, 154.295, 153.65, 152.35, 152.3, 151.97, 151.87, 152.16, 152.95, 153.0, 152.9499, 152.87, 152.51, 152.28, 152.84, 153.35, 152.6, 152.66, 152.19, 152.0212, 151.92, 151.87, 151.7, 151.5, 151.69, 151.57, 151.57, 151.6, 151.18, 151.82, 152.42, 152.06, 152.21, 153.86, 153.97, 154.19, 154.3, 154.26, 154.16, 154.0, 153.85, 153.71, 153.62, 153.85]
    # aapl_close_s = [152.77, 152.58, 152.51, 152.78, 152.55, 151.01, 150.9833, 152.56, 152.68, 152.65, 152.5399, 152.19, 151.56, 151.14, 151.0, 151.07, 150.9, 150.94, 150.61, 150.64, 150.46, 152.1144, 151.9044, 151.8, 152.61, 151.5611, 150.74, 147.63, 149.3, 149.79, 149.03, 149.16, 148.6, 148.51, 148.76, 149.08, 148.48, 148.65, 148.2, 149.1697, 149.85, 150.46, 149.775, 151.04, 150.64, 150.06, 150.51, 150.64, 150.4, 150.4, 150.5623, 150.6101, 150.55, 151.3025, 151.9513, 153.55, 154.1, 153.8885, 154.2949, 153.65, 152.52, 152.24, 151.91, 151.86, 152.65, 153.0, 153.02, 152.93, 152.89, 152.5, 152.29, 152.83, 153.34, 152.61, 152.65, 152.25, 151.94, 152.0, 151.79, 151.6, 151.43, 151.64, 151.53, 151.5966, 151.58, 151.1795, 151.83, 152.4288, 152.0656, 152.1914, 153.855, 153.95, 154.13, 154.18, 154.2, 154.15, 153.78, 153.89, 153.7, 153.62]

    # snp500_open_s = [391.35, 391.76, 391.81, 391.69, 388.87, 389.17, 391.44, 392.52, 392.0, 391.14, 389.57, 387.8, 387.0, 386.8, 387.51, 386.93, 386.58, 386.02, 385.93, 385.27, 388.49, 387.88, 386.61, 388.85, 387.72, 385.55, 383.12, 387.9399, 387.61, 385.96, 388.09, 391.75, 386.78, 386.9, 387.59, 385.92, 387.46, 384.91, 387.84, 389.87, 391.265, 389.18, 392.62, 391.0, 391.06, 390.26, 389.91, 389.34, 390.73, 391.37, 391.48, 391.6, 393.43, 395.18, 397.94, 399.1, 399.96, 400.77, 399.65, 397.91, 398.38, 398.06, 397.48, 398.18, 398.85, 399.19, 399.14, 398.91, 397.33, 396.9915, 397.955, 399.33, 398.37, 398.74, 398.48, 398.22, 398.78, 399.01, 398.79, 398.74, 398.47, 398.32, 398.28, 398.28, 397.745, 398.38, 400.335, 399.87, 400.44, 404.31, 404.87, 404.9813, 405.0, 405.42, 405.11, 405.33, 404.69, 404.56, 404.61, 404.45]
    # snp500_close_s = [391.63, 391.33, 391.74, 392.0, 391.69, 388.87, 389.1691, 391.43, 392.53, 391.99, 391.13, 389.59, 387.96, 387.09, 386.81, 387.6, 385.73, 386.62, 386.03, 386.0, 385.29, 388.48, 387.83, 386.62, 388.86, 387.7, 385.5664, 383.04, 386.16, 387.73, 385.89, 388.23, 387.06, 386.78, 386.95, 387.51, 385.92, 387.44, 384.91, 387.835, 389.87, 391.265, 389.15, 392.58, 391.01, 391.09, 390.21, 389.92, 390.11, 390.74, 391.37, 391.45, 391.59, 393.43, 395.17, 397.92, 399.09, 399.96, 400.78, 399.7, 397.91, 398.28, 398.05, 397.52, 398.64, 398.88, 399.2, 399.16, 398.92, 397.3299, 397.0099, 397.95, 399.315, 398.3692, 398.745, 398.49, 398.23, 398.78, 399.04, 398.72, 398.24, 398.47, 398.31, 398.3, 398.26, 397.745, 398.3866, 400.34, 399.89, 400.42, 404.3572, 404.88, 404.97, 405.03, 405.35, 405.1, 404.75, 404.69, 404.55, 404.62]

    aapl_open_s: float = [152.75, 152.77, 152.79, 152.96, 152.88, 152.14, 150.585, 151.16, 150.94, 151.22, 150.65, 150.77, 150.58, 151.93, 152.71, 152.87, 152.6, 152.55, 152.75, 152.59, 151.0125, 150.98, 152.5699, 152.675, 152.64, 152.52, 152.16, 151.18, 151.14, 150.98, 151.08, 150.95, 150.94, 150.64, 150.52, 150.47, 152.11, 151.92, 151.8, 152.61, 151.565, 150.74, 147.622, 149.8, 149.52, 149.0, 149.11, 150.02, 148.45, 148.76, 149.04, 148.47, 148.66, 148.2, 149.17, 149.86, 150.44, 149.79, 151.04, 150.3, 150.02, 150.48, 150.58, 150.29, 150.4, 150.57, 150.61, 150.54, 151.31, 151.96, 153.56, 154.11, 153.88, 154.295, 153.65, 152.35, 152.3, 151.97, 151.87, 152.16, 152.95, 153.0, 152.9499, 152.87, 152.51, 152.28, 152.84, 153.35, 152.6, 152.66, 152.19, 152.0212, 151.92, 151.87, 151.7, 151.5, 151.69, 151.57, 151.57, 151.6]
    aapl_close_s: float = [152.7, 152.73, 152.77, 152.8, 152.99, 152.87, 152.13, 150.585, 151.17, 150.92, 151.21, 150.66, 150.75, 150.48, 151.81, 152.7, 152.77, 152.58, 152.51, 152.78, 152.55, 151.01, 150.9833, 152.56, 152.68, 152.65, 152.5399, 152.19, 151.56, 151.14, 151.0, 151.07, 150.9, 150.94, 150.61, 150.64, 150.46, 152.1144, 151.9044, 151.8, 152.61, 151.5611, 150.74, 147.63, 149.3, 149.79, 149.03, 149.16, 148.6, 148.51, 148.76, 149.08, 148.48, 148.65, 148.2, 149.1697, 149.85, 150.46, 149.775, 151.04, 150.64, 150.06, 150.51, 150.64, 150.4, 150.4, 150.5623, 150.6101, 150.55, 151.3025, 151.9513, 153.55, 154.1, 153.8885, 154.2949, 153.65, 152.52, 152.24, 151.91, 151.86, 152.65, 153.0, 153.02, 152.93, 152.89, 152.5, 152.29, 152.83, 153.34, 152.61, 152.65, 152.25, 151.94, 152.0, 151.79, 151.6, 151.43, 151.64, 151.53, 151.5966]
    snp500_open_s: float = [389.48, 388.94, 389.01, 389.35, 388.66, 386.51, 384.14, 385.7, 386.18, 385.6, 384.5, 385.931, 384.69, 388.63, 391.23, 391.63, 391.35, 391.76, 391.81, 391.69, 388.87, 389.17, 391.44, 392.52, 392.0, 391.14, 389.57, 387.8, 387.0, 386.8, 387.51, 386.93, 386.58, 386.02, 385.93, 385.27, 388.49, 387.88, 386.61, 388.85, 387.72, 385.55, 383.12, 387.9399, 387.61, 385.96, 388.09, 391.75, 386.78, 386.9, 387.59, 385.92, 387.46, 384.91, 387.84, 389.87, 391.265, 389.18, 392.62, 391.0, 391.06, 390.26, 389.91, 389.34, 390.73, 391.37, 391.48, 391.6, 393.43, 395.18, 397.94, 399.1, 399.96, 400.77, 399.65, 397.91, 398.38, 398.06, 397.48, 398.18, 398.85, 399.19, 399.14, 398.91, 397.33, 396.9915, 397.955, 399.33, 398.37, 398.74, 398.48, 398.22, 398.78, 399.01, 398.79, 398.74, 398.47, 398.32, 398.28, 398.28]
    snp500_close_s: float = [388.78, 389.39, 388.88, 389.1, 389.35, 388.66, 386.49, 384.14, 385.72, 386.165, 385.57, 384.52, 385.26, 384.75, 388.67, 391.18, 391.63, 391.33, 391.74, 392.0, 391.69, 388.87, 389.1691, 391.43, 392.53, 391.99, 391.13, 389.59, 387.96, 387.09, 386.81, 387.6, 385.73, 386.62, 386.03, 386.0, 385.29, 388.48, 387.83, 386.62, 388.86, 387.7, 385.5664, 383.04, 386.16, 387.73, 385.89, 388.23, 387.06, 386.78, 386.95, 387.51, 385.92, 387.44, 384.91, 387.835, 389.87, 391.265, 389.15, 392.58, 391.01, 391.09, 390.21, 389.92, 390.11, 390.74, 391.37, 391.45, 391.59, 393.43, 395.17, 397.92, 399.09, 399.96, 400.78, 399.7, 397.91, 398.28, 398.05, 397.52, 398.64, 398.88, 399.2, 399.16, 398.92, 397.3299, 397.0099, 397.95, 399.315, 398.3692, 398.745, 398.49, 398.23, 398.78, 399.04, 398.72, 398.24, 398.47, 398.31, 398.3]
    
    # sdev = stdev(aapl_close_s)

    # print(sdev)
    # print(len(aapl_close_s))

    # sma_y, sma_x = sma(aapl_close_s, 10)
    # print(sma_x)
    # print(sma_y)

    # dlist = daily_return(aapl_open_s, aapl_close_s)
    # dlistSnP500 = daily_return(snp500_open_s, snp500_close_s)

    # b1 = beta2(dlist, dlistSnP500)

    beta_5day_aapl: float = beta4(aapl_open_s, aapl_close_s, snp500_open_s, snp500_close_s)
    print(beta_5day_aapl)



    # Variance: _
    # Standard Deviation: _
    # Î²: _
    # l = [1, 2, 3, 4]
    # av1 = float(np.average(l))
    # w = [2, 4, 6, 8]
    # av2 = float(np.average(w))
    # s = summation(lambda x, y: (x - av1) * (y - av2), l, w)
    # print(s/3)

    # q = covariance(l, w)
    # print(q)

    # h = variance(l)
    # print(h)